
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.Provider;
import java.security.Security;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.List;

import sun.security.pkcs11.SunPKCS11;

import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.log.LoggerFactory;
import com.itextpdf.text.log.SysoLogger;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfSignatureAppearance;
import com.itextpdf.text.pdf.PdfStamper;
import com.itextpdf.text.pdf.security.BouncyCastleDigest;
import com.itextpdf.text.pdf.security.CertificateUtil;
import com.itextpdf.text.pdf.security.CrlClient;
import com.itextpdf.text.pdf.security.CrlClientOnline;
import com.itextpdf.text.pdf.security.DigestAlgorithms;
import com.itextpdf.text.pdf.security.ExternalDigest;
import com.itextpdf.text.pdf.security.ExternalSignature;
import com.itextpdf.text.pdf.security.MakeSignature;
import com.itextpdf.text.pdf.security.MakeSignature.CryptoStandard;
import com.itextpdf.text.pdf.security.OcspClient;
import com.itextpdf.text.pdf.security.PrivateKeySignature;
import com.itextpdf.text.pdf.security.TSAClient;
import com.itextpdf.text.pdf.security.TSAClientBouncyCastle;

public class AssinaturaDigital {
	private static KeyStore keyStore;
	private static SunPKCS11 provider;

	public static KeyStore instanceOfA3(String arq, String pin)
			throws Exception {
		if (keyStore == null) {
			FileInputStream fis = new FileInputStream(arq);
			provider = (SunPKCS11) Class
					.forName("sun.security.pkcs11.SunPKCS11")
					.getConstructor(String.class).newInstance(arq);
			Security.addProvider(provider);
			keyStore = KeyStore.getInstance("pkcs11", provider);
			try {
				keyStore.load(fis, pin.toCharArray());
			} catch (IOException e) {
				throw new Exception(
						"Senha do Certificado Digital esta incorreta ou Certificado invï¿½lido.");
			}
		}
		return keyStore;
	}

	public void sign(String src, String dest, Certificate[] chain,
			PrivateKey pk, String digestAlgorithm, String provider,
			CryptoStandard subfilter, String reason, String location,
			Collection<CrlClient> crlList, OcspClient ocspClient,
			TSAClient tsaClient, int estimatedSize)
			throws GeneralSecurityException, IOException, DocumentException {
		// Creating the reader and the stamper

		PdfSignatureAppearance appearance = null;
		PdfReader reader = new PdfReader(src);
		FileOutputStream os = new FileOutputStream(dest);
		PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');

		try {
			// Creating the appearance
			appearance = stamper.getSignatureAppearance();
			appearance.setReason(reason);
			appearance.setLocation(location);

			appearance.setVisibleSignature(new Rectangle(20, 1, 144, 30), 1,
					null);
			ExternalSignature pks = new PrivateKeySignature(pk,
					digestAlgorithm, provider);

			ExternalDigest digest = new BouncyCastleDigest();
	
			MakeSignature.signDetached(appearance, digest, pks, chain, crlList,
					ocspClient, tsaClient, estimatedSize, subfilter);
		} catch (GeneralSecurityException ex) {
			System.out.println("ERROR " + ex.getMessage());
		} catch (DocumentException ex) {
			System.out.println("ERROR " + ex.getMessage());
		} catch (IOException ex) {
			System.out.println("ERROR " + ex.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("ERROR " + e.getMessage());
		} finally {
			stamper.close();
			os.close();
			reader.close();
			Security.removeProvider(provider);
			try {
				Thread.sleep(2000L);
			} catch (InterruptedException e) {

				e.printStackTrace();
			}

		}
	}

	public static void main(String[] args) throws Exception {
		PrivateKey pk = null;
		Certificate[] chain = null;

		if (args.length > 0) {
			String parametros = args[0];
			String[] parametro;
			parametro = parametros.split("&");
			String source = parametro[0];
			String destination = parametro[1];
			String keystore_password = parametro[2];  

			try {


				String arq = "C:\\token.cfg.txt";
				LoggerFactory.getInstance().setLogger(new SysoLogger());
				KeyStore ks = instanceOfA3(arq, keystore_password);

				
				String alias = (String) ks.aliases().nextElement();
				
				pk = (PrivateKey) ks.getKey(alias, null);

				chain = funcListaCertificados(true); // ks.getCertificateChain(alias);
				
				TSAClient tsaClient = null;

				for (int i = 0; i < chain.length; i++) {
					X509Certificate cert = (X509Certificate) chain[i];
					String tsaUrl = CertificateUtil.getTSAURL(cert);
					if (tsaUrl != null) {
						tsaClient = new TSAClientBouncyCastle(tsaUrl);
						break;
					}

				}

				List<CrlClient> crlList = new ArrayList<CrlClient>();
				crlList.add(new CrlClientOnline(chain));
				AssinaturaDigital app = new AssinaturaDigital();
				app.sign(source, destination, chain, pk,
						DigestAlgorithms.SHA256, ks.getProvider().getName(),
						CryptoStandard.CMS, "Teste", "SP", null, null,
						tsaClient, 0);
			} catch (Exception e) {
				System.out.println("ERROR");
				e.printStackTrace();
			} finally {
				chain = null;
				pk = null;
				
			}
		}
	}

	public static Certificate[] funcListaCertificados(boolean booCertValido)
			throws NoSuchProviderException, IOException,
			NoSuchAlgorithmException, CertificateException {

		String strResult[] = new String[20];
		Integer intCnt = 0;
		Certificate[] chain = null;
		try {
			KeyStore ks = KeyStore.getInstance("Windows-MY", "SunMSCAPI");
			ks.load(null, null);

			Enumeration<String> aliasEnum = ks.aliases();

			while (aliasEnum.hasMoreElements()) {
				String aliasKey = (String) aliasEnum.nextElement();

				if (booCertValido == false) {
					strResult[intCnt] = aliasKey;

				} else if (ks.isKeyEntry(aliasKey)) {
					strResult[intCnt] = aliasKey;
					chain = ks.getCertificateChain(aliasKey);
				}

				if (strResult[intCnt] != null) {
					intCnt = intCnt + 1;

				}

			}

		} catch (KeyStoreException ex) {
			System.out.println("ERROR " + ex.getMessage());
		}

		return chain;// strResult;

	}

}
